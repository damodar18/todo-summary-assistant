import * as BSON from 'bson';

declare module 'mongoose' {

  
  type Date = Schema.Types.Date;

  /**
   * The Mongoose Decimal128 [SchemaType](/docs/schematypes.html). Used for
   * declaring paths in your schema that should be
   * [128-bit decimal floating points](http://thecodebarbarian.com/a-nodejs-perspective-on-mongodb-34-decimal.html).
   * Do not use this to create a new Decimal128 instance, use `mongoose.Types.Decimal128`
   * instead.
   */
  type Decimal128 = Schema.Types.Decimal128;


  /**
   * The Mongoose Int32 [SchemaType](/docs/schematypes.html). Used for
   * declaring paths in your schema that should be
   * 32-bit integers
   * Do not use this to create a new Int32 instance, use `mongoose.Types.Int32`
   * instead.
   */
  type Int32 = Schema.Types.Int32;

  /**
   * The Mongoose Mixed [SchemaType](/docs/schematypes.html). Used for
   * declaring paths in your schema that Mongoose's change tracking, casting,
   * and validation should ignore.
   */
  type Mixed = Schema.Types.Mixed;

  /**
   * The Mongoose Number [SchemaType](/docs/schematypes.html). Used for
   * declaring paths in your schema that Mongoose should cast to numbers.
   */
  type Number = Schema.Types.Number;


  /**
   * The Mongoose Double [SchemaType](/docs/schematypes.html). Used for
   * declaring paths in your schema that Mongoose should cast to doubles (IEEE 754-2008)/
   */
  type Double = Schema.Types.Double;

  /**
   * The Mongoose ObjectId [SchemaType](/docs/schematypes.html). Used for
   * declaring paths in your schema that should be
   * [MongoDB ObjectIds](https://www.mongodb.com/docs/manual/reference/method/ObjectId/).
   * Do not use this to create a new ObjectId instance, use `mongoose.Types.ObjectId`
   * instead.
   */
  type ObjectId = Schema.Types.ObjectId;

  
  const SchemaTypes: typeof Schema.Types;

  type DefaultType<T> = T extends Schema.Types.Mixed ? any : Partial<ExtractMongooseArray<T>>;

  class SchemaTypeOptions<T, EnforcedDocType = any, THydratedDocumentType = HydratedDocument<EnforcedDocType>> {
    type?:
    T extends string ? StringSchemaDefinition :
      T extends number ? NumberSchemaDefinition :
        T extends boolean ? BooleanSchemaDefinition :
          T extends NativeDate ? DateSchemaDefinition :
            T extends Map<any, any> ? SchemaDefinition<typeof Map> :
              T extends Buffer ? SchemaDefinition<typeof Buffer> :
                T extends Types.ObjectId ? ObjectIdSchemaDefinition :
                  T extends Types.ObjectId[] ? AnyArray<ObjectIdSchemaDefinition> | AnyArray<SchemaTypeOptions<ObjectId, EnforcedDocType, THydratedDocumentType>> :
                    T extends object[] ? (AnyArray<Schema<any, any, any>> | AnyArray<SchemaDefinition<Unpacked<T>>> | AnyArray<SchemaTypeOptions<Unpacked<T>, EnforcedDocType, THydratedDocumentType>>) :
                      T extends string[] ? AnyArray<StringSchemaDefinition> | AnyArray<SchemaTypeOptions<string, EnforcedDocType, THydratedDocumentType>> :
                        T extends number[] ? AnyArray<NumberSchemaDefinition> | AnyArray<SchemaTypeOptions<number, EnforcedDocType, THydratedDocumentType>> :
                          T extends boolean[] ? AnyArray<BooleanSchemaDefinition> | AnyArray<SchemaTypeOptions<boolean, EnforcedDocType, THydratedDocumentType>> :
                            T extends Function[] ? AnyArray<Function | string> | AnyArray<SchemaTypeOptions<Unpacked<T>, EnforcedDocType, THydratedDocumentType>> :
                              T | typeof SchemaType | Schema<any, any, any> | SchemaDefinition<T> | Function | AnyArray<Function>;

    
    alias?: string | string[];

    
    validate?: SchemaValidator<T, EnforcedDocType, THydratedDocumentType> | AnyArray<SchemaValidator<T, EnforcedDocType, THydratedDocumentType>>;

    
    cast?: string |
    boolean |
    ((value: any) => T) |
    [(value: any) => T, string] |
    [((value: any) => T) | null, (value: any, path: string, model: Model<any>, kind: string) => string];

    /**
     * If true, attach a required validator to this path, which ensures this path
     * path cannot be set to a nullish value. If a function, Mongoose calls the
     * function and only checks for nullish values if the function returns a truthy value.
     */
    required?: boolean | ((this: EnforcedDocType) => boolean) | [boolean, string] | [(this: EnforcedDocType) => boolean, string];

    /**
     * The default value for this path. If a function, Mongoose executes the function
     * and uses the return value as the default.
     */
    default?: DefaultType<T> | ((this: EnforcedDocType, doc: any) => DefaultType<T> | null | undefined) | null;

    /**
     * The model that `populate()` should use if populating this path.
     */
    ref?: string | Model<any> | ((this: any, doc: any) => string | Model<any>);

    /**
     * The path in the document that `populate()` should use to find the model
     * to use.
     */

    refPath?: string | ((this: any, doc: any) => string);

    /**
     * Whether to include or exclude this path by default when loading documents
     * using `find()`, `findOne()`, etc.
     */
    select?: boolean | number;

    /**
     * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will
     * build an index on this path when the model is compiled.
     */
    index?: boolean | IndexDirection | IndexOptions;

    /**
     * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose
     * will build a unique index on this path when the
     * model is compiled. [The `unique` option is **not** a validator](/docs/validation.html#the-unique-option-is-not-a-validator).
     */
    unique?: boolean | number | [true, string];

    /**
     * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will
     * disallow changes to this path once the document is saved to the database for the first time. Read more
     * about [immutability in Mongoose here](http://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html).
     */
    immutable?: boolean | ((this: any, doc: any) => boolean);

    /**
     * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will
     * build a sparse index on this path.
     */
    sparse?: boolean | number;

    /**
     * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose
     * will build a text index on this path.
     */
    text?: boolean | number | any;

    /**
     * Define a transform function for this individual schema type.
     * Only called when calling `toJSON()` or `toObject()`.
     */
    transform?: (this: any, val: T) => any;

    
    get?: (value: any, doc?: this) => T | undefined;

    
    set?: (value: any, priorVal?: T, doc?: this) => any;

    
    enum?: Array<string | number | null> | ReadonlyArray<string | number | null> | { values: Array<string | number | null> | ReadonlyArray<string | number | null>, message?: string } | { [path: string]: string | number | null };

    
    subtype?: number;

    
    min?: number | NativeDate | [number, string] | [NativeDate, string] | readonly [number, string] | readonly [NativeDate, string];

    
    max?: number | NativeDate | [number, string] | [NativeDate, string] | readonly [number, string] | readonly [NativeDate, string];

    
    minimize?: boolean;

    
    expires?: string | number;

    
    excludeIndexes?: boolean;

    
    _id?: boolean;

    
    of?: Function | SchemaDefinitionProperty<any>;

    
    auto?: boolean;

    
    match?: RegExp | [RegExp, string] | readonly [RegExp, string];

    
    lowercase?: boolean;

    
    trim?: boolean;

    
    uppercase?: boolean;

    
    minlength?: number | [number, string] | readonly [number, string];

    
    maxlength?: number | [number, string] | readonly [number, string];

    [other: string]: any;

    /**
     * If set, configures the field for automatic encryption.
     */
    encrypt?: EncryptSchemaTypeOptions;
  }

  interface Validator<DocType = any> {
    message?: string | ((props: ValidatorProps) => string);
    type?: string;
    validator?: ValidatorFunction<DocType>;
    reason?: Error;
  }

  type ValidatorFunction<DocType = any> = (this: DocType, value: any, validatorProperties?: Validator) => any;

  interface QueryEncryptionEncryptOptions {
    
    keyId: BSON.Binary;

    /**
     * Specifies the type of queries that the field can be queried on the encrypted field.
    */
    queries?: 'equality' | 'range';
  }

  interface ClientSideEncryptionEncryptOptions {
    
    keyId: [BSON.Binary];

    /**
     * The algorithm to use for encryption.
     */
    algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' | 'AEAD_AES_256_CBC_HMAC_SHA_512-Random';
  }

  export type EncryptSchemaTypeOptions = QueryEncryptionEncryptOptions | ClientSideEncryptionEncryptOptions;

  class SchemaType<T = any, DocType = any> {
    
    constructor(path: string, options?: AnyObject, instance?: string);

    
    static cast(caster?: Function | boolean): Function;

    static checkRequired(checkRequired?: (v: any) => boolean): (v: any) => boolean;

    
    static set(option: string, value: any): void;

    
    static get(getter: (value: any) => any): void;

    
    static setters: ((val?: unknown, priorVal?: unknown, doc?: Document<unknown>, options?: Record<string, any> | null) => unknown)[];

    
    OptionsConstructor: SchemaTypeOptions<T>;

    
    cast(val: any, doc?: Document<any>, init?: boolean, prev?: any, options?: any): any;
    cast<ResultType>(val: any, doc?: Document<any>, init?: boolean, prev?: any, options?: any): ResultType;

    
    default(val: any): any;

    
    get(fn: Function): this;

    
    getEmbeddedSchemaType<T = any, DocType = any>(): SchemaType<T, DocType> | undefined;

    /**
     * Defines this path as immutable. Mongoose prevents you from changing
     * immutable paths unless the parent document has [`isNew: true`](/docs/api/document.html#document_Document-isNew).
     */
    immutable(bool: boolean): this;

    
    index(options: any): this;

    
    instance: string;

    
    isRequired?: boolean;

    
    options: AnyObject;

    
    path: string;

    /**
     * Set the model that this path refers to. This is the option that [populate](https://mongoosejs.com/docs/populate.html)
     * looks at to determine the foreign collection it should query.
     */
    ref(ref: string | boolean | Model<any>): this;

    /**
     * Adds a required validator to this SchemaType. The validator gets added
     * to the front of this SchemaType's validators array using unshift().
     */
    required(required: boolean, message?: string): this;

    
    schema: Schema<any>;

    
    select(val: boolean): this;

    
    set(fn: Function): this;

    
    sparse(bool: boolean): this;

    
    text(bool: boolean): this;

    toJSONSchema(options?: { useBsonType?: boolean }): Record<string, any>;

    
    transform(fn: (value: any) => any): this;

    
    unique(bool: boolean): this;

    
    validators: Validator[];

    
    validate(obj: RegExp | ValidatorFunction<DocType> | Validator<DocType>, errorMsg?: string, type?: string): this;

    
    validateAll(validators: Array<RegExp | ValidatorFunction<DocType> | Validator<DocType>>): this;

    
    defaultOptions?: Record<string, any>;
  }

  namespace Schema {
    namespace Types {
      class Array extends SchemaType implements AcceptsDiscriminator {
        
        static schemaName: 'Array';

        static options: { castNonArrays: boolean; };

        discriminator<T, U>(name: string | number, schema: Schema<T, U>, value?: string): U;
        discriminator<D>(name: string | number, schema: Schema, value?: string): Model<D>;

        
        caster?: SchemaType;

        
        defaultOptions: Record<string, any>;

        /**
         * Adds an enum validator if this is an array of strings or numbers. Equivalent to
         * `SchemaString.prototype.enum()` or `SchemaNumber.prototype.enum()`
         */
        enum(vals: string[] | number[]): this;
      }

      class BigInt extends SchemaType {
        
        static schemaName: 'BigInt';

        
        defaultOptions: Record<string, any>;
      }

      class Boolean extends SchemaType {
        
        static schemaName: 'Boolean';

        
        static convertToTrue: Set<any>;

        
        static convertToFalse: Set<any>;

        
        defaultOptions: Record<string, any>;
      }

      class Buffer extends SchemaType {
        
        static schemaName: 'Buffer';

        /**
         * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)
         * for this buffer. You can find a [list of allowed subtypes here](http://api.mongodb.com/python/current/api/bson/binary.html).
         */
        subtype(subtype: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 128): this;

        
        defaultOptions: Record<string, any>;
      }

      class Date extends SchemaType {
        
        static schemaName: 'Date';

        
        expires(when: number | string): this;

        
        max(value: NativeDate, message?: string): this;

        
        min(value: NativeDate, message?: string): this;

        
        defaultOptions: Record<string, any>;
      }

      class Decimal128 extends SchemaType {
        
        static schemaName: 'Decimal128';

        
        defaultOptions: Record<string, any>;
      }

      class Int32 extends SchemaType {
        
        static schemaName: 'Int32';

        
        defaultOptions: Record<string, any>;
      }

      class DocumentArray extends SchemaType implements AcceptsDiscriminator {
        
        static schemaName: 'DocumentArray';

        static options: { castNonArrays: boolean; };

        discriminator<D>(name: string | number, schema: Schema, value?: string): Model<D>;
        discriminator<T, U>(name: string | number, schema: Schema<T, U>, value?: string): U;

        
        schema: Schema;

        
        caster?: typeof Types.Subdocument;

        
        defaultOptions: Record<string, any>;
      }

      class Map extends SchemaType {
        
        static schemaName: 'Map';

        
        defaultOptions: Record<string, any>;
      }

      class Mixed extends SchemaType {
        
        static schemaName: 'Mixed';

        
        defaultOptions: Record<string, any>;
      }

      class Number extends SchemaType {
        
        static schemaName: 'Number';

        
        enum(vals: number[]): this;

        
        max(value: number, message?: string): this;

        
        min(value: number, message?: string): this;

        
        defaultOptions: Record<string, any>;
      }

      class Double extends SchemaType {
        
        static schemaName: 'Double';

        
        defaultOptions: Record<string, any>;
      }

      class ObjectId extends SchemaType {
        
        static schemaName: 'ObjectId';

        
        auto(turnOn: boolean): this;

        
        defaultOptions: Record<string, any>;
      }

      class Subdocument<DocType = unknown> extends SchemaType implements AcceptsDiscriminator {
        
        static schemaName: string;

        
        schema: Schema;

        
        defaultOptions: Record<string, any>;

        discriminator<T, U>(name: string | number, schema: Schema<T, U>, value?: string): U;
        discriminator<D>(name: string | number, schema: Schema, value?: string): Model<D>;

        cast(val: any, doc?: Document<any>, init?: boolean, prev?: any, options?: any): HydratedSingleSubdocument<DocType>;
      }

      class String extends SchemaType {
        
        static schemaName: 'String';

        
        enum(vals: string[] | any): this;

        
        lowercase(shouldApply?: boolean): this;

        
        match(value: RegExp, message: string): this;

        
        maxlength(value: number, message: string): this;

        
        minlength(value: number, message: string): this;

        
        trim(shouldTrim?: boolean): this;

        
        uppercase(shouldApply?: boolean): this;

        
        defaultOptions: Record<string, any>;
      }

      class UUID extends SchemaType {
        
        static schemaName: 'UUID';

        
        defaultOptions: Record<string, any>;
      }
    }
  }
}
