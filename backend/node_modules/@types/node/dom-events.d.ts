export {}; // Don't export anything!









type __Event = typeof globalThis extends { onmessage: any; Event: any } ? {}
    : {
        
        readonly bubbles: boolean;
        
        cancelBubble: () => void;
        
        readonly cancelable: boolean;
        
        readonly composed: boolean;
        
        composedPath(): [EventTarget?];
        
        readonly currentTarget: EventTarget | null;
        
        readonly defaultPrevented: boolean;
        
        readonly eventPhase: 0 | 2;
        
        readonly isTrusted: boolean;
        
        preventDefault(): void;
        
        returnValue: boolean;
        
        readonly srcElement: EventTarget | null;
        
        stopImmediatePropagation(): void;
        
        stopPropagation(): void;
        
        readonly target: EventTarget | null;
        
        readonly timeStamp: number;
        
        readonly type: string;
    };


type __EventTarget = typeof globalThis extends { onmessage: any; EventTarget: any } ? {}
    : {
        /**
         * Adds a new handler for the `type` event. Any given `listener` is added only once per `type` and per `capture` option value.
         *
         * If the `once` option is true, the `listener` is removed after the next time a `type` event is dispatched.
         *
         * The `capture` option is not used by Node.js in any functional way other than tracking registered event listeners per the `EventTarget` specification.
         * Specifically, the `capture` option is used as part of the key when registering a `listener`.
         * Any individual `listener` may be added once with `capture = false`, and once with `capture = true`.
         */
        addEventListener(
            type: string,
            listener: EventListener | EventListenerObject,
            options?: AddEventListenerOptions | boolean,
        ): void;
        
        dispatchEvent(event: Event): boolean;
        
        removeEventListener(
            type: string,
            listener: EventListener | EventListenerObject,
            options?: EventListenerOptions | boolean,
        ): void;
    };

interface EventInit {
    bubbles?: boolean;
    cancelable?: boolean;
    composed?: boolean;
}

interface EventListenerOptions {
    
    capture?: boolean;
}

interface AddEventListenerOptions extends EventListenerOptions {
    
    once?: boolean;
    
    passive?: boolean;
    
    signal?: AbortSignal;
}

interface EventListener {
    (evt: Event): void;
}

interface EventListenerObject {
    handleEvent(object: Event): void;
}

import {} from "events"; // Make this an ambient declaration
declare global {
    
    interface Event extends __Event {}
    var Event: typeof globalThis extends { onmessage: any; Event: infer T } ? T
        : {
            prototype: __Event;
            new(type: string, eventInitDict?: EventInit): __Event;
        };

    /**
     * EventTarget is a DOM interface implemented by objects that can
     * receive events and may have listeners for them.
     */
    interface EventTarget extends __EventTarget {}
    var EventTarget: typeof globalThis extends { onmessage: any; EventTarget: infer T } ? T
        : {
            prototype: __EventTarget;
            new(): __EventTarget;
        };
}
